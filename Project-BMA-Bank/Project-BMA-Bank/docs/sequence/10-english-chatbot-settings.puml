@startuml Detailed Chatbot and Settings Implementation

skinparam sequence {
    ParticipantBackgroundColor LightBlue
    ActorBackgroundColor LightGreen
    DatabaseBackgroundColor LightYellow
}

actor User
participant "ChatBotController" as CBC
participant "OpenAIChatbot" as OAI
participant "SettingsController" as SC
participant "UserSession" as US
database "DatabaseBankSystem" as DB
participant "OpenAI API" as API

== Chatbot Initialization ==
User -> CBC: openChat()
activate CBC
CBC -> US: getInstance()
US --> CBC: session
CBC -> US: getUsername()
US --> CBC: currentUsername
CBC -> DB: getUserDetails(username)
DB --> CBC: userDetails
CBC -> CBC: initialize()
note right: Initialize UI components and buttons
CBC --> User: display chat interface
deactivate CBC

== Chat Interaction ==
User -> CBC: handleAskChatbot(question)
activate CBC
CBC -> CBC: validate question
CBC -> CBC: addMessageToChat("You", question)

CBC -> OAI: getChatResponse(initialPrompt)
activate OAI
OAI -> API: send request
API --> OAI: questionType
OAI --> CBC: question type
deactivate OAI

alt Banking Question
    CBC -> OAI: getChatResponse(dataPrompt)
    activate OAI
    OAI -> API: send request
    API --> OAI: aiResponse
    OAI --> CBC: operation type
    deactivate OAI

    alt Balance Request
        CBC -> DB: getBalance(currentUsername)
        DB --> CBC: balance
        CBC -> CBC: addMessageToChat("Assistant", balance)
    else Transaction Request
        CBC -> DB: getRecentTransactions(currentUsername)
        DB --> CBC: transactions
        CBC -> CBC: addMessageToChat("Assistant", transactions)
    else Transfer History Request
        CBC -> DB: getRecentTransfers(currentUsername)
        DB --> CBC: transfers
        CBC -> CBC: addMessageToChat("Assistant", transfers)
    else Money Transfer Request
        CBC -> DB: transfer(from, to, amount)
        DB --> CBC: success
        CBC -> CBC: addMessageToChat("Assistant", result)
    end
else General Question
    CBC -> OAI: getChatResponse(generalPrompt)
    activate OAI
    OAI -> API: send request
    API --> OAI: response
    OAI --> CBC: general response
    deactivate OAI
    CBC -> CBC: addMessageToChat("Assistant", response)
end

CBC --> User: display response
deactivate CBC

== Settings Initialization ==
User -> SC: openSettings()
activate SC
SC -> US: getInstance()
US --> SC: session
SC -> US: getUsername()
US --> SC: currentUsername
SC -> DB: getUserDetails(username)
DB --> SC: userDetails
SC -> SC: loadUserData()
note right: Load data into form fields
SC --> User: display settings
deactivate SC

== Settings Update ==
User -> SC: enableEditing()
activate SC
SC -> SC: enable form fields
SC --> User: editable form

User -> SC: updateUserData()
SC -> SC: validate input
SC -> DB: updateUserDetails(data)
DB --> SC: update result
SC --> User: confirmation message

User -> SC: changeProfileImage()
SC -> SC: open file chooser
SC -> DB: updateProfileImage(path)
DB --> SC: update result
SC --> User: display new image
deactivate SC

== Logout Process ==
User -> SC: handleLogout()
activate SC
SC -> US: clearSession()
SC -> SC: navigate to login
SC --> User: logout complete
deactivate SC

@enduml 